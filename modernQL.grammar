statement ::= select 
            | update
            | delete
            | insert


select ::= SELECT OPEN_BRACE obj-body-decl (condition-body)? CLOSE_BRACE

update ::= UPDATE OPEN_PAR IDENTIFIER CLOSE_PAR OPEN_BRACE obj-body-assignment (condition-body)?  CLOSE_BRACE

delete ::= UPDATE OPEN_PAR IDENTIFIER CLOSE_PAR OPEN_BRACE conditional-obj-body-decl  CLOSE_BRACE

insert ::= ( CREATE | INSERT ) OPEN_PAR IDENTIFIER CLOSE_PAR OPEN_BRACE assignment-obj-body-decl  CLOSE_BRACE

obj-body-decl ::= IDENTIFIER (body)?

body ::= OPEN_BRACE (attribute EOL)+ CLOSE_BRACE

obj-body-assignment ::= IDENTIFIER ASSIGNMENT_OPERATOR IDENTIFIER | IDENTIFIER OPEN_BRACE obj-body-assignment CLOSE_BRACE

attribute ::= IDENTIFIER attribute-prime

attribute-prime ::= OPEN_PAR IDENTIFIER CLOSE_PAR
                    | (USING | ON) foreign-key 
                    | epsilon

foreign-key ::= IDENTIFIER (body)?

spread-operation ::= SPREAD_OPERATOR IDENTIFIER

condition-body ::= WHERE OPEN_BRACE conditional-obj-body-decl CLOSE_BRACE

conditional-obj-body-decl ::= expression (EOL expression)* 

expression ::= foo ( LOGICAL_LESSEQUAL_OPERATOR | LOGICAL_GREATEREQUAL_OPERATOR | LOGICAL_LESSTHAN_OPERATOR | LOGICAL_GREATERTHAN_OPERATOR | LOGICAL_EQUAL_OPERATOR | LOGICAL_NOTEQUAL_OPERATOR  expression)*

foo ::= bar ( LOGICAL_AND_OPERATOR |  LOGICAL_OR_OPERATOR foo)*

bar ::=  OPEN_PAR expression CLOSE_PAR | IDENTIFIER bar-prime | BOOL_LITERAL | INT_LITERAL | STRING_LITERAL | LOGICAL_NOT_OPERATOR expression

bar-prime ::= OPEN_BRACE conditional-obj-body-decl CLOSE_BRACE
                | epsilon


//TODO: Update SHOULD NOT CALL obj-body-decl, instead, it should have its own object declaration production because inside the update body, assignments occurs, unlike anyone else! -> Done? 


--- Expression Productions ----

E ::= E '<=' F | E '>=' F | E '<' F | E '>' F | E '==' F | E '!=' F
F ::= F  'AND' G | F 'NOT' G | F 'OR' G | F '&&' G | F '||' G
G ::= IDENTIFIER  | '!' E

--- Eliminating Left Recursion ---

E ::= FOO ( '<=' | '>=' | '<' | '>' | '==' | '!=' E)*
FOO ::= BAR ( 'AND' | 'NOT' | 'OR' | '&&' | '||' FOO)*
BAR ::= IDENTIFIER | '!' E

Operators:

<= >= < > == != 
AND NOT OR 
&&   !  ||



attribute ::= IDENTIFIER | IDENTIFIER OPEN_PAR IDENTIFIER CLOSE_PAR | IDENTIFIER ( USING | ON ) obj-body-decl       // TODO: Factorize this production 

--- Left factoring ---

attribute ::= IDENTIFIER attribute-prime

attribute-prime ::= OPEN_PAR IDENTIFIER CLOSE_PAR
                    | IDENTIFIER (USING | ON) obj-body-decl 
                    | epsilon


bar ::= IDENTIFIER | IDENTIFIER OPEN_BRACE conditional-obj-body-decl CLOSE_BRACE | BOOL_LITERAL | INT_LITERAL | STRING_LITERAL | LOGICAL_NOT_OPERATOR expression

--- Left factoring ---

bar ::= IDENTIFIER bar-prime

bar-prime ::= OPEN_BRACE conditional-obj-body-decl CLOSE_BRACE
                | epsilon